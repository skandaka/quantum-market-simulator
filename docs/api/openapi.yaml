openapi: 3.0.3
info:
  title: Quantum Market Simulator API
  description: Comprehensive API for quantum-enhanced market simulation and financial prediction
  version: 1.0.0
  contact:
    name: Quantum Market Simulator Team
    email: support@quantum-market-simulator.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.quantum-market-simulator.com/v1
    description: Production server
  - url: https://staging-api.quantum-market-simulator.com/v1
    description: Staging server
  - url: http://localhost:8000/api/v1
    description: Development server

tags:
  - name: simulation
    description: Market simulation operations
  - name: quantum
    description: Quantum algorithm endpoints
  - name: portfolio
    description: Portfolio management operations
  - name: market-data
    description: Market data retrieval and processing
  - name: predictions
    description: Market prediction and forecasting
  - name: sentiment
    description: Sentiment analysis operations
  - name: health
    description: System health and monitoring

paths:
  /simulation/run:
    post:
      tags: [simulation]
      summary: Run market simulation
      description: Execute a comprehensive market simulation with specified parameters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimulationRequest'
      responses:
        '200':
          description: Simulation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimulationResponse'
        '400':
          description: Invalid simulation parameters
        '500':
          description: Internal server error

  /quantum/predict:
    post:
      tags: [quantum]
      summary: Generate quantum predictions
      description: Use quantum algorithms to generate market predictions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuantumPredictionRequest'
      responses:
        '200':
          description: Quantum prediction generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuantumPredictionResponse'

  /portfolio/optimize:
    post:
      tags: [portfolio]
      summary: Optimize portfolio allocation
      description: Use quantum optimization for portfolio allocation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioOptimizationRequest'
      responses:
        '200':
          description: Portfolio optimization completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioOptimizationResponse'

  /market-data/{symbol}:
    get:
      tags: [market-data]
      summary: Get market data for symbol
      description: Retrieve historical and real-time market data
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
          description: Stock symbol (e.g., AAPL, GOOGL)
        - name: period
          in: query
          schema:
            type: string
            enum: [1d, 5d, 1mo, 3mo, 6mo, 1y, 2y, 5y, 10y, ytd, max]
          description: Time period for data retrieval
      responses:
        '200':
          description: Market data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketDataResponse'

  /health:
    get:
      tags: [health]
      summary: System health check
      description: Check system health and component status
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

components:
  schemas:
    SimulationRequest:
      type: object
      required: [symbols, timeframe]
      properties:
        symbols:
          type: array
          items:
            type: string
          description: List of stock symbols to simulate
        timeframe:
          type: string
          enum: [1h, 1d, 1w, 1m]
          description: Simulation timeframe
        quantum_enabled:
          type: boolean
          default: true
          description: Enable quantum algorithms
        news_sentiment:
          type: boolean
          default: true
          description: Include news sentiment analysis
        custom_parameters:
          type: object
          description: Custom simulation parameters

    SimulationResponse:
      type: object
      properties:
        simulation_id:
          type: string
          description: Unique simulation identifier
        status:
          type: string
          enum: [completed, running, failed]
        results:
          type: object
          properties:
            predictions:
              type: array
              items:
                $ref: '#/components/schemas/Prediction'
            portfolio_allocation:
              type: object
            risk_metrics:
              type: object
        execution_time:
          type: number
          description: Execution time in seconds
        quantum_advantage:
          type: number
          description: Quantum advantage percentage

    QuantumPredictionRequest:
      type: object
      required: [symbol, algorithm]
      properties:
        symbol:
          type: string
          description: Stock symbol
        algorithm:
          type: string
          enum: [VQE, QAOA, QuantumML, QNLP]
          description: Quantum algorithm to use
        parameters:
          type: object
          description: Algorithm-specific parameters

    QuantumPredictionResponse:
      type: object
      properties:
        prediction:
          $ref: '#/components/schemas/Prediction'
        quantum_metrics:
          type: object
          properties:
            circuit_depth:
              type: integer
            gate_count:
              type: integer
            coherence_time:
              type: number
            fidelity:
              type: number
        classical_comparison:
          type: object

    Prediction:
      type: object
      properties:
        symbol:
          type: string
        predicted_price:
          type: number
        confidence:
          type: number
        direction:
          type: string
          enum: [up, down, stable]
        probability_distribution:
          type: array
          items:
            type: number
        timestamp:
          type: string
          format: date-time

    PortfolioOptimizationRequest:
      type: object
      required: [symbols, risk_tolerance]
      properties:
        symbols:
          type: array
          items:
            type: string
        risk_tolerance:
          type: number
          minimum: 0
          maximum: 1
        investment_amount:
          type: number
        constraints:
          type: object

    PortfolioOptimizationResponse:
      type: object
      properties:
        allocation:
          type: object
          description: Optimized portfolio allocation
        expected_return:
          type: number
        risk_metrics:
          type: object
          properties:
            volatility:
              type: number
            sharpe_ratio:
              type: number
            var:
              type: number

    MarketDataResponse:
      type: object
      properties:
        symbol:
          type: string
        data:
          type: array
          items:
            type: object
            properties:
              timestamp:
                type: string
              open:
                type: number
              high:
                type: number
              low:
                type: number
              close:
                type: number
              volume:
                type: number

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        components:
          type: object
          properties:
            database:
              type: string
            quantum_backend:
              type: string
            ml_models:
              type: string
            external_apis:
              type: string
        metrics:
          type: object
